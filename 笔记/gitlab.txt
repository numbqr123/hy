GitLab 是 Ruby on Rails 開發的應用程式, 操作使用非常類似 GitHub, 可以通過 Web 存取 公開 或 私人的 Project.

GitLab 介紹、測試

    GitLab: Self Hosted Git Management Application
    GitLab Blog
    Gitlab - 維基百科，自由的百科全書
    GitLab Demo
    GitLab 使用介紹 (PDF)

將 GitLab 架設於 Debian Wheezy

GitLab 系統需求

硬體需求(摘錄自此篇: Gitlabhq doc install requirements):

    CPU
        1 core works for under 100 users but the responsiveness might suffer
        2 cores is the recommended number of cores and supports up to 100 users
        4 cores supports about 1,000 users
        8 cores supports up to 10,000 users
    Memory
        1GB supports up to 100 users if you do not have individual repo's over 250MB
        2GB is the recommended memory size and supports up to 1,000 users
        4GB supports up to 10,000 users

系統安裝(Gitlabhq doc install installation.md)步驟如下:

系統、套件版本需求:

    Ubuntu/Debian
    python 2.5+ (3.x is not supported at the moment)
    ruby 1.9.3+
    git 1.7.10+
    redis 2.0+
    MySQL or PostgreSQL

基本環境安裝步驟

    sudo apt-get install -y build-essential zlib1g-dev libyaml-dev libssl-dev libgdbm-dev libreadline-dev libncurses5-dev libffi-dev curl openssh-server redis-server checkinstall libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev logrotate

Python

    python --version # 如果是 python 3, 要安裝 python 2
    sudo apt-get install python2.7
    python2 --version # 要確認 python2 存在, 不存在執行下述命令
    sudo ln -s /usr/bin/python /usr/bin/python2
    sudo apt-get install -y python-docutils # For reStructuredText markup language support install required package

Git

    sudo apt-get install -y git-core
    git --version # 需要 git 1.7.10 以上, < 1.7.10 的話, 需要手動安裝新版的 Git.

Postfix

    sudo apt-get install -y postfix # 若之後需要寄通知信的話, 需要安裝 postfix

Ruby、Gem

    # Debian wheezy 的 ruby 是 1.9.1, 不夠新, 手動 Compile
    mkdir /tmp/ruby && cd /tmp/ruby
    curl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p247.tar.gz | tar xz
    cd ruby-2.0.0-p247
    ./configure --disable-install-rdoc
    make
    sudo make install
    sudo gem install bundler --no-ri --no-rdoc # Install the Bundler Gem

系統設定

    sudo adduser --disabled-login --gecos 'GitLab' git # 增加系統使用者

GitLab shell

    cd /home/git
    sudo -u git -H git clone https://github.com/gitlabhq/gitlab-shell.git
    cd gitlab-shell
    sudo -u git -H git checkout v2.4.0 # 切到正確版本
    sudo -u git -H cp config.yml.example config.yml
    sudo -u git -H editor config.yml # 主要修改 gitlab_url, 改成自己要的 http://domain.com/
    sudo -u git -H ./bin/install # 會依照 config.yml 設定、建目錄、key 等

Database

    GitLab Database 安裝說明(可參考此篇: gitlabhq doc install databases.md)
    sudo apt-get install -y mysql-server mysql-client libmysqlclient-dev
    mysql -u root -p
        mysql> CREATE USER 'gitlab'@'localhost' IDENTIFIED BY 'GITLAB_PASSWORD';
        mysql> CREATE DATABASE IF NOT EXISTS `gitlabhq_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;
        mysql> GRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlabhq_production`.* TO 'gitlab'@'localhost';
    # 使用 gitlab 帳號, 測試 MySQL 連線狀況
    sudo -u git -H mysql -u gitlab -p -D gitlabhq_production # 輸入密碼看有沒有進入 mysql>

GitLab 系統安裝

    # 用 Git 帳號來 安裝 GitLab 系統
    cd /home/git
    sudo -u git -H git clone https://github.com/gitlabhq/gitlabhq.git gitlab # Clone the Source, Clone GitLab repository
    cd /home/git/gitlab
    sudo -u git -H git checkout 6-2-stable # 切換到 6-2 stable 版本(git branch -a, git branch -r), 列表可見: https://github.com/gitlabhq/gitlabhq/branches

GitLab 設定

以下 *editor 的命令, 偷懶直接 sudo vim 編輯也可以.

    cd /home/git/gitlab
    sudo -u git -H cp config/gitlab.yml.example config/gitlab.yml
    sudo -u git -H editor config/gitlab.yml # 將 localhost 都修改成你的 Domain.
    sudo chown -R git log/
    sudo chown -R git tmp/
    sudo chmod -R u+rwX  log/
    sudo chmod -R u+rwX  tmp/
    sudo -u git -H mkdir /home/git/gitlab-satellites
    sudo -u git -H mkdir tmp/pids/
    sudo -u git -H mkdir tmp/sockets/
    sudo chmod -R u+rwX  tmp/pids/
    sudo chmod -R u+rwX  tmp/sockets/
    sudo -u git -H mkdir public/uploads
    sudo chmod -R u+rwX  public/uploads
    sudo -u git -H cp config/unicorn.rb.example config/unicorn.rb
    sudo -u git -H editor config/unicorn.rb # 如果有 2G Ram, 就將設定檔得 workers 改為 3,不然就不用動
    sudo -u git -H cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb
    sudo -u git -H editor config/application.rb # 將 config.middleware.use Rack::Attack 打開, 前面 "#" 移除
    # 設定 git 帳號得 username、Email.. 等資料
    sudo -u git -H git config --global user.name "GitLab"
    sudo -u git -H git config --global user.email "gitlab@localhost"
    sudo -u git -H git config --global core.autocrlf input

GitLab DB 設定

    sudo -u git cp config/database.yml.mysql config/database.yml
    sudo -u git -H editor config/database.yml # 修改 MySQL 設定的帳號、密碼, 設定 production 就可以了.

安裝 Gems

    cd /home/git/gitlab
    sudo gem install charlock_holmes --version '0.6.9.4' # Character encoding detecting library for Ruby using ICU
    sudo -u git -H bundle install --deployment --without development test postgres aws # 安裝相關 Ruby Gems Package MySQL 執行此行, PostgreSQL 是把 "without postgres" 改成 "without mysql"
    若遇到下述錯誤訊息 (使用 Percona MySQL)
    An error occurred while installing mysql2 (0.3.11), and Bundler cannot continue.
    Make sure that `gem install mysql2 -v '0.3.11'` succeeds before bundling.
    解法: sudo apt-get install libmysqlclient18.1-dev # Percona 需安裝此 Library.
    註: Gemfile.lock 可看到目前取用 mysql2 得版本是 0.3.11, 新版可見 https://rubygems.org/gems/mysql2
    再來重新執行上述命令即可安裝完成: sudo -u git -H bundle install --deployment --without development test postgres aws
    sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production # 初始化 DB, 並將 Rails 設定到 Production mode, 輸入 'yes' 建立 database
    產生 GitLab 預設帳號、密碼 如下:
        login.........admin@local.host
        password......5iveL!fe

設定開機自動啟動

    sudo cp lib/support/init.d/gitlab /etc/init.d/gitlab
    sudo chmod +x /etc/init.d/gitlab
    sudo update-rc.d gitlab defaults 21

設定 Logrotate

    sudo cp lib/support/logrotate/gitlab /etc/logrotate.d/gitlab

檢查 GitLab 環境設定狀態

    sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production

啟動 GitLab

    sudo service gitlab start # 或 sudo /etc/init.d/gitlab restart

檢查 GitLab 各個系統狀態

    sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production
    訊息檢查說少了這些, 就補上去.
        sudo -u git -H git config --global user.name  "GitLab"
        sudo -u git -H git config --global user.email "gitlab@localhost"

設定 Apache2 環境

    sudo apt-get install apache2
    可見: gitlab-recipes/web-server/apache at master · gitlabhq/gitlab-recipes
    取得 github.conf: https://github.com/gitlabhq/gitlab-recipes/blob/master/web-server/apache/gitlab.conf
    cd /tmp/
    wget https://raw.github.com/gitlabhq/gitlab-recipes/master/web-server/apache/gitlab.conf
	
	https://raw.github.com/gitlabhq/gitlab-recipes/5-1-stable/nginx/gitlab  
	
    sudo vim gitlab.conf # 修改 ServerName, ProxyPassReverse, Log 路徑(/var/log/httpd/logs/ => /var/log/apache2/)等等.
    sudo mv gitlab.conf /etc/apache2/sites-enabled/
    sudo a2enmod rewrite proxy proxy_http
    sudo service apache2 restart # 或 sudo /etc/init.d/apache2 restart

重新啟動 GitLab 方式

    sudo /etc/init.d/gitlab restart

到此即安裝完成, 可用下述帳號、密碼登入:

    http://gitlab.domain-name # 連線進入, 預設帳號、密碼如下:
    login: admin@local.host
    password: 5iveL!fe

備份、還原

    /home/git/ - 備份全部
    下述感謝 fetag 提供得資訊:
        Gitlab 的備份與恢復可以參考：
        https://github.com/gitlabhq/gitlabhq/blob/master/doc/raketasks/backup_restore.md
        是直接 bundle 執行 script 打包必要文件為 .tar 檔案，恢復時亦同。

問題除錯檢查

    ssh -vT git@gitlab.domain-name # 測試看看 ssh 是否可以通

問題: 若是用 hosts 設定 假Domain 來作安裝的話, 如果指令(git push -u origin master)遇到下述錯誤:

    Access denied.
    fatal: The remote end hung up unexpectedly

解法:

    vim /home/git/gitlab-shell/config.yml
        Debug Log: /home/git/gitlab-shell/gitlab-shell.log , tail -f /var/log/auth.log
        Debug SSH: ssh -T -v git@gitlab.domain-name
    翻 /home/git/gitlab-shell/gitlab-shell.log 可以看到錯誤訊息, 若錯誤訊息是 404, 請加上下述:

        $ vim /etc/hosts
        127.0.0.1  gitlab.domain-name
		
		
		bundle exec rails s -e producntionser
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

    首页
    开源项目
    问答	
    代码
    博客
    翻译
    资讯
    移动开发
    招聘
    城市圈

当前访客身份：游客 [ 登录 | 加入开源中国 ]
当前访客身份： 游客 [ 登录 | 加入开源中国 ]
软件
xuesong13
xuesong13
[男] 关注此人	
关注(2) 粉丝(3) 积分(9)
加油~
.
发送留言
.
请教问题
博客分类

    数据库(2)
    hadoop(12)
    linux(17)
    kafka(1)
    gitlab(3)
    openstack(2)
    redis(1)
    IDE(2)

阅读排行

    1. CentOS配置ssh无密码登录
    2. eclipse安装jetty插件
    3. centos7安装图形界面
    4. 安装gitlab
    5. Packstack单节点一键安装openstack
    6. centos7安装gitlab
    7. redis维护问题总结
    8. kafka维护问题总结

最新评论

    @kobe_gino：必须要加精，这么好的帖...... 查看»
    @notreami：不知道为啥，我安装这个插件，运行jetty报错。难... 查看»
    @蓝色感应：很好！ 查看»
    @skyim：文章不错,给你赞一下 查看»
    @黑帽子：文章很好，谢谢。 查看»
    @xuesong13：引用来自“FrogFun”的评论您知道kafka报分配的内... 查看»
    @FrogFun：您知道kafka报分配的内存用完 怎么处理吗，我在学... 查看»

访客统计

    今日访问：168
    昨日访问：243
    本周访问：1095
    本月访问：4431
    所有访问：22460

空间 » 博客	»

    gitlab
    数据库
    hadoop
    linux
    kafka
    openstack
    redis
    IDE
    所有分类

原	安装gitlab
发表于8个月前(2014-11-13 21:27)   阅读（3276） | 评论（1） 13人收藏此文章, 我要收藏
赞0
摘要 本文介绍了gitlab的安装，给出来安装过程中出现的问题和解决的方式，供大家参考。自动安装gitlab的方法见http://my.oschina.net/u/1169607/blog/345833。
gitlab安装 gitlab部署

目录[-]
1 安装依赖
1.1 修改yum源
1.2 安装epel源
1.3 安装依赖
2 安装 Ruby 2.0
3 配置gitlab-shell
4 配置数据库
5 安装redis服务
7 启动 gitlab

Gitlab是一个用Ruby on Rails开发的开源项目管理程序，可以通过WEB界面进行访问公开的或者私人项目。它和Github有类似的功能，能够浏览源代码，管理缺陷和注释。

下面介绍如何手动在Centos下搭建配置GitLab，自动安装gitlab的方法见http://my.oschina.net/u/1169607/blog/345833。
1 安装依赖
1.1 修改yum源

国内比较快的有163源、sohu源，这里以CentOS6.5中修改yum源为例子：

1. cd /etc/yum.repos.d

2. mv CentOS-Base.repo CentOS-Base.repo.backup

3. wget http://mirrors.163.com/.help/CentOS6-Base-163.repo

4. mv CentOS6-Base-163.repo CentOS-Base.repo

5.yum clean all
1.2 安装epel源

Centos下官方仓库的软件比较老旧，推荐先添加epel源，centos6选6，5就选5：

32位系统选择：

rpm -ivh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm

rpm -ivh http://dl.fedoraproject.org/pub/epel/5/i386/epel-release-5-4.noarch.rpm

64位系统选择：

rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

rpm -ivh http://dl.fedoraproject.org/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm

导入key：

rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6

rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-5

如果用比较新的软件，用epel-test.repo这个文件就行了

另外还要安装yum install yum-priorities

[root@localhost yum.repos.d]# ls |grep epel

epel.repo

epel-testing.repo
1.3 安装依赖

sudo yum install git patch gcc-c++ readline-devel zlib-devel libffi-devel openssl-devel make autoconf automake libtool bison libxml2-devel libxslt-devel libyaml-devel git python python-docutils wget
2 安装 Ruby 2.0

需要安装Ruby2.0，软件仓库中的Ruby 1.8不支持，安装命令如下：

mkdir /tmp/ruby && cd /tmp/ruby

curl --progress ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p353.tar.gz | tar xz

cd ruby-2.0.0-p353

./configure --disable-install-rdoc

make

sudo make install

安装Bundler Gem：

sudo gem install bundler --no-ri --no-rdoc

安装过程中会出现下面的错误：

[root@h77 ruby-2.0.0-p353]# gem install bundler --no-ri --no-rdoc

ERROR:  Could not find a valid gem 'bundler' (>= 0), here is why: Unable to download data from https://rubygems.org/ - Errno::ETIMEDOUT: Connection timed out - connect(2) (https://rubygems.org/latest_specs.4.8.gz)

是因为国内网络导致rubygems.org存放在Amazon S3上面的资源文件间歇性连接失败，用国内的RubyGems镜像(参见http://ruby.taobao.org/)替换官方镜像，方法如下：

[root@h77 ruby-2.0.0-p353]# gem sources --remove https://rubygems.org/

https://rubygems.org/ removed from sources

[root@h77 ruby-2.0.0-p353]# gem sources -a https://ruby.taobao.org/

https://ruby.taobao.org/ added to sources

[root@h77 ruby-2.0.0-p353]# gem sources -l

*** CURRENT SOURCES ***

 

https://ruby.taobao.org/

[root@h77 ruby-2.0.0-p353]# gem install bundler --no-ri --no-rdoc

Fetching: bundler-1.7.6.gem (100%)

Successfully installed bundler-1.7.6

1 gem installed
3 配置gitlab-shell

创建git用户：

sudo adduser --system --create-home --comment 'GitLab' git  

配置gitlab-shell

su - git -c "git clone https://github.com/gitlabhq/gitlab-shell.git"  

su - git -c "cd gitlab-shell && git checkout v1.3.0"  

su - git -c "cp gitlab-shell/config.yml.example gitlab-shell/config.yml"  

sed -i "s/localhost/{你自己的ip或主机名}/g" /home/git/gitlab-shell/config.yml  

su - git -c "gitlab-shell/bin/install"
4 配置数据库

Centos下使用如下命令：

sudo yum install mysql-server 

sudo chkconfig mysqld on

配置MySQL：

sudo echo "CREATE DATABASE IF NOT EXISTS gitlabhq_production DEFAULT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci';" | mysql -u root -p
5 安装redis服务

切换到root用户，安装Redis，确保按照前面步骤正确安装epel源，执行下面语句：

yum install redis*  

安装完成后，启动redis服务，设置开机启动，语句如下：

service redis start     #启动redis  

chkconfig redis on     #设置开机启动  

6 安装配置 gitlab

su - git -c "git clone https://github.com/gitlabhq/gitlabhq.git gitlab"  

su - git -c "cd gitlab;git checkout 5-1-stable"  

su - git -c "cp config/gitlab.yml.example config/gitlab.yml"  

su - git -c "mkdir /home/git/gitlab-satellites"  

su - git -c "mkdir public/uploads"  

su - git -c "mkdir -p tmp/sockets/"  

su - git -c "mkdir -p tmp/pids/"  

sed -i "s/ host: localhost/ host: {你自己的ip或主机名}/g" config/gitlab.yml  

sed -i "s/from: gitlab@localhost/from: gitlab@{你自己的ip或主机名}/g" config/gitlab.yml  

su - git -c "cp config/puma.rb.example config/puma.rb"  

su - git -c 'git config --global user.name "GitLab"'  

su - git -c 'git config --global user.email "gitlab@{你自己的ip或主机名}"'

配置数据库连接：

sudo su git -c "cp config/database.yml.mysql config/database.yml"

sudo sed -i "s/secure password/mysql的root密码/g" config/database.yml

安装MySQL需要的Gems

sudo -u git -H bundle install --deployment --without development test postgres puma aws

该步骤问题较多，具体如下所示：

1. 出现“sudo: bundle: command not found”的错误，解决方式用“su git”进入git用户，再执行“bundle install --deployment --without development test postgres aws”命令；

2. 出现“Could not locate Gemfile”的错误，解决方式执行“bundle install --deployment --without development test postgres aws”命令必须在“/home/git/gitlab”目录下，所以“cd  /home/git/gitlab”进入该目录；

3. 出现“Fetching source index from https://rubygems.org/”长时间没有响应，因为Gemfile中的源连接不上，更换源，将其中的"http://rubygems.org/"变成"http://ruby.taobao.org"，具体如下：

source "http://ruby.taobao.org"  # 旧 source "https://rubygems.org/" 

4. 出现“Could not find modernizr-2.6.2 in any of the sources”问题，因为官网和淘宝的ruby源都没有这个包，解决办法是先手动去下载 然后root用户安装wget http://rubygems.org/gems/modernizr-2.6.2.gem  && gem install modernizr，再将gitlab目录下的Gemfile文件和Gemfile.lock文件中的“modernizr”全部换成“modernizr-rails”，版本“2.6.2”全部换成“2.7.1”；

5. 出现“An error occurred while installing charlock_holmes (0.6.9), and Bundler cannot continue.”问题，因为charlock_holmes没有安装，用root用户执行下面命令：gem install charlock_holmes -v '0.6.9'

6. 出现“Error installing charlock_holmes: ERROR: Failed to build gem native 

extension.”问题，因为缺少某些依赖包，执行下列语句：yum install libicu-devel mysql-devel pcre-devel postfix

7. 出现“Error connecting to Redis on localhost:6379 (ECONNREFUSED)”问题，因为redis服务没有安装，安装见之前步骤介绍。

接下来执行初始化操作：

sudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production

如果看到如下信息：

Administrator account created:

 

login.........admin@local.host

password......5iveL!fe

表示已经成功安装gitLab了，记下管理员的用户名和密码。
7 启动 gitlab

接下来执行下列命令启动gitlab：

[git@h79 gitlab]$ bundle exec rails s -e production

=> Booting WEBrick

=> Rails 3.2.13 application starting in production on http://0.0.0.0:3000

=> Call with -d to detach

=> Ctrl-C to shutdown server

[2014-11-13 21:15:30] INFO  WEBrick 1.3.1

[2014-11-13 21:15:30] INFO  ruby 2.0.0 (2013-11-22) [x86_64-linux]

[2014-11-13 21:15:30] INFO  WEBrick::HTTPServer#start: pid=20972 port=3000

表示gitlab启动成功，可以通过http://{gitlab的域名或IP}:3000访问gitlab。第一访问会比较慢，因为要编译很多js和css。

另外3000端口可能受防火墙影响，关闭防火墙 chkconfig iptables off（重启后永久性生效）service iptables stop（及时生效，重启后失效）。

登陆页面如下所示：

输入管理用户名和密码后，登录进去的页面如下所示：





分享到： 0赞
声明：OSCHINA 博客文章版权属于作者，受法律保护。未经作者同意不得转载。

    « 上一篇
    下一篇 »

评论1

    [kobe_gino] 	
    1楼：kobe_gino 发表于 2015-07-01 17:18 回复此评论
    必须要加精，这么好的帖......

xuesong13

插入： 表情 开源软件
关闭
相关文章阅读

    2013/11/25 安装gitlab
    2015/05/28 Ubuntu 14.04下安装GitLab指南...
    2014/04/08 GitLab 部署
    2013/05/23 gitLab安装
    2015/06/23 gitlab 安装

© 开源中国(OSChina.NET) | 关于我们 | 广告联系 | @新浪微博 | 开源中国手机版 | 粤ICP备12009483号-3 	开源中国手机客户端：
Android
iPhone
WP7
开源中国社区(OSChina.net)是工信部 开源软件推进联盟 指定的官方社区





































在 CentOS 上部署 GitLab (自托管的Git项目仓库)

参考资料
https://github.com/mattias-ohlsson/gitlab-installer/blob/master/gitlab-install-el6.sh

最近更新
GitLab已经发布了deb和rpm包，下载地址为：https://www.gitlab.com/downloads/

环境准备
OS: CentOS 6.3 x86_64

1.初识GitLab
GitLab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。
它拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。团队成员可以利用内置的简单聊天程序(Wall)进行交流。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。

GitLab 要求服务器端采用 Gitolite 搭建，5.0版本以后对于ssh服务，GitLab不再使用 Gitolite ，采用自己开发的 gitlab-shell 来实现。

在GitHub上托管代码，私人项目是需要付费的，并且对于企业而言，还是将Git服务器放在内部要更加安全一些。因此，如果喜欢GitHub这种简洁风格的Git服务器，在本地搭建一个GitLab是一个非常不错的选择。
另外，如果需要对代码进行Review，推荐使用Gerrit，要复杂一些，但是功能非常强大。

2.安装部署GitLab
2.1 如果有条件，提供一台全新的Server，仅仅只安装了一些系统的软件包，可以直接使用一键安装的脚本来搭建，非常容易，具体步骤如下：

2.1.1 安装EPEL扩展源
切换到root用户
$ sudo -i
# rpm -ivh http://fr2.rpmfind.net/linux/epel/6/x86_64/epel-release-6-8.noarch.rpm

2.1.2 安装git
# yum install git

2.1.3 下载gitlab-installer.sh安装脚本
# git clone https://github.com/mattias-ohlsson/gitlab-installer.git

2.1.4 执行安装脚本
# cd gitlab-installer/
# ./gitlab-install-el6.sh

等待脚本执行完毕后，会提示如下信息(比如Server主机名为:heydevops-node-2)：
01
	### Done ########################################
02
	#
03
	# You have your MySQL root password in this file:
04
	# /config/database.yml
05
	#
06
	# Point your browser to:
07
	# http://heydevops-node-2 (or: http://[host-ip])
08
	# Default admin username: admin@local.host
09
	# Default admin password: 5iveL!fe
10
	#
11
	#################################################

2.1.5 将脚本的Ruby版本指向到ruby-1.9.3-p392
# vim /home/git/gitlab-shell/bin/gitlab-shell
1
	#!/usr/local/rvm/bin/ruby-1.9.3-p392

2.1.6 使用GitLab
接着，就可以通过 http://[host-ip] ([host-ip]是Server的IP)来访问GitHub了。
首先，会看到如下所示的登陆界面：

通过上面提示信息内的账号密码登陆，登陆过后首先新增一个Project：

添加Project过后，会有一个配置向导，提供了非常详细的本地Git配置步骤：

在进行这些本地配置之前，首先要在本地生成SSH-Keygen，并将Public Key添加到GitLab中：

# ssh-keygen -t rsa
# cat .ssh/id_rsa.pub

然后将所查看到的信息，都添加到GitLab的 MyProfile - SSH Key - Add New 中：

接着，就可以再本地按照图片中所示的步骤进行操作并使用GitLab了。

2.2 上面的部署步骤，主要是采用了脚本gitlab-install-el6.sh来实现的，里面其实包含了很多的配置步骤，如果本地不是一个全新的环境，那么我们最好按照以下步骤来进行手动配置：

2.2.1 安装EPEL扩展源
切换到root用户
$ sudo -i

# rpm -ivh http://fr2.rpmfind.net/linux/epel/6/x86_64/epel-release-6-8.noarch.rpm

2.2.2 安装git
# yum install git

2.2.3 安装系统依赖
# yum -y install patch gcc-c++ readline-devel zlib-devel libffi-devel openssl-devel make autoconf automake libtool bison libxml2-devel libxslt-devel libyaml-devel

2.2.4 安装rvm
# curl -L get.rvm.io | sudo bash -s stable

# source /etc/profile.d/rvm.sh
# rvm pkg install libyaml
# rvm --default use 1.9.3-p392
# gem install bundler

2.2.5 创建git用户
# adduser --system --create-home --comment 'GitLab' git

2.2.6 配置gitlab-shell(比如Server主机名为:heydevops-node-2)
# su - git -c "git clone https://github.com/gitlabhq/gitlab-shell.git"
# su - git -c "cp gitlab-shell/config.yml.example gitlab-shell/config.yml"

# su - git -c "gitlab-shell/bin/install"

# chmod 600 /home/git/.ssh/authorized_keys
# chmod 700 /home/git/.ssh

2.2.7 安装Redis
# yum -y install redis
# service redis start
# chkconfig redis on

2.2.8 安装配置MySQL
# yum install -y mysql-server
# chkconfig mysqld on

# echo "CREATE DATABASE IF NOT EXISTS gitlabhq_production DEFAULT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci';" | mysql -u root
# echo "UPDATE mysql.user SET Password=PASSWORD('gitlab') WHERE User='root'; FLUSH PRIVILEGES;" | mysql -u root

2.2.9 安装配置GitLab
# su - git -c "git clone https://github.com/gitlabhq/gitlabhq.git gitlab"
# su - git -c "cd gitlab;git checkout 5-0-stable"

# cd /home/git/gitlab
# su git -c "cp config/gitlab.yml.example config/gitlab.yml"
# sed -i "s/ host: localhost/ host: heydevops-node-2/g" config/gitlab.yml
# sed -i "s/from: gitlab@localhost/from: gitlab@heydevops-node-2/g" config/gitlab.yml

2.2.10 创建Unicorn配置文件
# su git -c "cp config/unicorn.rb.example config/unicorn.rb"

# sed -i "s/^listen/#listen/g" /home/git/gitlab/config/unicorn.rb
# sed -i "s/#listen \"127.0.0.1:8080\"/listen \"127.0.0.1:3000\"/g" /home/git/gitlab/config/unicorn.rb

# su git -c "cp config/database.yml.mysql config/database.yml"
# sed -i "s/secure password/gitlab/g" config/database.yml

# su git -c 'git config --global user.name "GitLab"'
# su git -c 'git config --global user.email "gitlab@$GL_HOSTNAME"'

2.2.10 安装Gems
# yum -y install libicu-devel
# gem install charlock_holmes --version '0.6.9'

# yum -y install mysql-devel
# su git -c "bundle install --deployment --without development test postgres"

# export force=yes
# su git -c "bundle exec rake gitlab:setup RAILS_ENV=production"

# curl --output /etc/init.d/gitlab https://raw.github.com/gitlabhq/gitlab-recipes/master/init.d/gitlab-centos
# chmod +x /etc/init.d/gitlab

# sed -i "17 a source /etc/profile.d/rvm.sh\nrvm use 1.9.3-p392" /etc/init.d/gitlab

# chkconfig gitlab on
# service gitlab start

2.2.11 安装Apache
# yum -y install httpd
# chkconfig httpd on

# vim /etc/httpd/conf.d/gitlab.conf
1
	ProxyPass / http://127.0.0.1:3000/
2
	ProxyPassReverse / http://127.0.0.1:3000/
3
	ProxyPreserveHost On

# setenforce 0

# service httpd start

2.2.12 停止iptables
# service iptables stop

2.2.13 修复gitlab-shell
# vim /home/git/gitlab-shell/bin/gitlab-shell
将脚本的Ruby版本指向到ruby-1.9.3-p392
1
	#!/usr/local/rvm/bin/ruby-1.9.3-p392

2.2.14 完成，剩下的GitLab使用步骤与2.1.6相同。


curl -L https://get.rvm.io | bash -s stable --ruby



Ruby更改gem source

    博客分类： ruby 

 

 
很多时候，在安装gem的过程中会出现找不到资源的error，我们需要从另外一个gem服务器下载安装。

通过gem sources命令配置源，或通过修改Gemfile中的source语句可以实现。

常用的源
http://rubygems.org/
http://gems.github.com
http://gems.rubyforge.org
http://ruby.taobao.org 国内应该找个比较靠谱了，适合安装大多数常见的gem

显示当前使用的sources
gem sources

添加一个source
gem sources -a url地址

删除一个source
gem sources -r url地址

更新source cache
gem sources -u

ruby的安装与切换

列出已知的ruby版本
rvm list known
安装一个ruby版本
rvm install 1.9.3
这里安装了最新的1.9.3, rvm list known列表里面的都可以拿来安装。

使用一个ruby版本
rvm use 1.9.3
如果想设置为默认版本，可以这样

rvm use 1.9.3 --default 
查询已经安装的ruby
rvm list
卸载一个已安装版本
rvm remove 1.9.2



